// ----- NOTES -----
// -server: 
//   -validate user id
//   -save logUser object
//   -get user's claim code
//-pressing enter is not submitting user ID
//-ok to use empty innerhtml to remove graph or is their a proper way? - look at sigma docs
//-want width and height of graph area 100%? - we changed this to stop flickering scrollbars
//-haven't done anything for diff screen sizes or mobile
//-currently take the last highlighted nodes as the answer when no ans submitted 
//  -could add line of JS to L2 func closeQuestion:
//      logUser.question.slice(-1)[0].push({type:'submitAns',node:'submitAns'});
//should be storing orig question number with userLog - since Qs shuffled

[main] -> main.onLoad

  **
  userLog = {question:[]}; //global, track user id, actions and answers
  **
  
  hide =        {elmts -> elmts.setStyle 'display' 'none'}
  block =       {elmts -> elmts.setStyle 'display' 'block'}
  inlineBlock = {elmts -> elmts.setStyle 'display' 'inline-block'}
  innerHTML =   {elmts content -> elmts.setProp 'innerHTML' content}
                                  
  [gotConfig] Config -> 'config.json'.ajaxGet gotConfig
    
    Config = Config.fromJSON    
    Question = Config@question[.].shuf
  	timeLimit = Config@timeLimit
    elapsedElm = '#elapsed'.elm  
      
    [submitID] 
  	  **
  	  userLog.id = document.getElementById('userid').value
  	  **
      '#intro'.elm $hide
      '#instruc-text'.elm $innerHTML (Config@instruc@preMap) 
      '#instruc'.elm $block
    '#id-submit'.elm.on 'click' submitID
    
    [pressEnter] evt -> '#user-id'.elm.on 'keydown' pressEnter   
      if evt.detail 'code' == 'Enter' 
        submitID $$
        evt.stop   //do not submit form - ?? does this work? - is it keydown that fires submit?
    
  	[startMapQ] -> '#start'.elm.on 'click' startMapQ
      '#instruc'.elm $hide
      '#question'.elm $block
      loadQuestion $$

	  [loadQuestion]
	    ThisQ = Question.r (1-) 'cut' [.]
  	  '#question-text'.elm $innerHTML (ThisQ@text)
      '#submit-answer'.elm $inlineBlock
      **
      question(L2.toJS(L2_ThisQ));  //show queston - see question.js
      **
      elapsedElm.setStyle 'width' '0%'
      updateTimer.gap 1000 ("".time).delay timeLimit
      [endSurvey] -> Question.n == 0.alt endSurvey loadQuestion.delay timeLimit  
        '#graph-container'.elm $innerHTML ''
  	    '#question'.elm $hide
  	    '#finished'.elm $block
        
    [closeQuestion] evt -> '#submit-answer'.elm.on 'click' closeQuestion
      evt.me $hide        
      '#question-text'.elm $innerHTML 'Please wait until the timer runs out.' 
      '#graph-container'.elm $innerHTML ''
  	    
    [updateTimer] timeStarted
      elapsedElm.setStyle 'width' ("".time - timeStarted/timeLimit*100 + '%')    
  
   
 


